package integration.pipelines.declarative

import org.apache.commons.io.FileUtils

import java.nio.file.Paths

env.DONT_COLLECT='FOO'
env.COLLECT='BAR'
node("TestSlave") {
    def serverId = "Artifactory-1"
    def buildName = "declarative:maven test"
    def buildNumber = "${BUILD_NUMBER}"

    stage "Configure Artifactory"
    rtServer(
            id: serverId,
            url: "${env.JENKINS_PLATFORM_URL}".replaceFirst('/*$', '')+'/artifactory',
            username: "${env.JENKINS_PLATFORM_USERNAME}",
            password: "${env.JENKINS_PLATFORM_ADMIN_TOKEN}"
    )

    stage "Configure Maven build"
    rtMavenDeployer(
            id: "MAVEN_DEPLOYER",
            serverId: serverId,
            releaseRepo: "${LOCAL_REPO1}",
            snapshotRepo: "${LOCAL_REPO1}"
    )

    rtMavenResolver(
            id: "MAVEN_RESOLVER",
            serverId: serverId,
            releaseRepo: "${JCENTER_REMOTE_REPO}",
            snapshotRepo: "${JCENTER_REMOTE_REPO}"
    )

    stage "Copy project example"
    FileUtils.copyDirectory(Paths.get("${MAVEN_PROJECT_PATH}").toFile(), Paths.get(pwd(), "declarative-maven-example").toFile())


    // Should still locate the build info for this run
    dir('inner') {
        stage "Config Build Info"
        rtBuildInfo(
                buildName: buildName,
                buildNumber: buildNumber,
                captureEnv: true,
                excludeEnvPatterns: ["DONT_COLLECT"]
        )
    }

    stage "Run maven"
    rtMavenRun(
            buildName: buildName,
            buildNumber: buildNumber,
            pom: 'declarative-maven-example/pom.xml',
            goals: 'clean install -U',
            deployerId: "MAVEN_DEPLOYER",
            resolverId: "MAVEN_RESOLVER"
    )

    stage "Publish build info"
    rtPublishBuildInfo(
            serverId: serverId,
            buildName: buildName,
            buildNumber: buildNumber
    )
}
