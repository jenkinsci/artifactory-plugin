package integration.pipelines.declarative

import org.apache.commons.io.FileUtils

import java.nio.file.Paths

env.DONT_COLLECT='FOO'
env.COLLECT='BAR'
node("TestSlave") {
    def serverId = "Artifactory-1"
    def buildName = "declarative:gradle test"
    def buildNumber = "${BUILD_NUMBER}"

    stage "Configure Artifactory"
    rtServer(
            id: serverId,
            url: "${env.JENKINS_PLATFORM_URL}".replaceFirst('/*$', '')+'/artifactory',
            username: "${env.JENKINS_PLATFORM_USERNAME}",
            password: "${env.JENKINS_PLATFORM_ADMIN_TOKEN}"
    )

    stage "Configure Gradle build"
    rtGradleDeployer(
            id: "GRADLE_DEPLOYER",
            serverId: serverId,
            repo: "${LOCAL_REPO1}",
    )

    rtGradleResolver(
            id: "GRADLE_RESOLVER",
            serverId: serverId,
            repo: "${JCENTER_REMOTE_REPO}",
    )

    stage "Copy project example"
    FileUtils.copyDirectory(Paths.get("${GRADLE_PROJECT_PATH}").toFile(), Paths.get(pwd(), "declarative-gradle-example").toFile())

    stage "Config Build Info"
    rtBuildInfo(
            buildName: buildName,
            buildNumber: buildNumber,
            captureEnv: true,
            excludeEnvPatterns: ["DONT_COLLECT"]
    )

    stage "Run Gradle"
    rtGradleRun(
            buildName: buildName,
            buildNumber: buildNumber,
            usesPlugin: true,
            rootDir: 'declarative-gradle-example',
            buildFile: 'build.gradle',
            tasks: 'clean artifactoryPublish',
            deployerId: "GRADLE_DEPLOYER",
            resolverId: "GRADLE_RESOLVER",
            useWrapper: true
    )

    stage "Publish build info"
    rtPublishBuildInfo(
            serverId: serverId,
            buildName: buildName,
            buildNumber: buildNumber
    )
}
