package integration.pipelines.scripted

import org.apache.commons.io.FileUtils

import java.nio.file.Paths

env.DONT_COLLECT = 'FOO'
env.COLLECT = 'BAR'
node("TestSlave") {
    stage "Configure Artifactory"
    def rtServer = Artifactory.newServer url: "${env.JENKINS_PLATFORM_URL}".replaceFirst('/*$', '') + '/artifactory', username: "${env.JENKINS_PLATFORM_USERNAME}", password: "${env.JENKINS_PLATFORM_ADMIN_TOKEN}"
    def buildInfo = Artifactory.newBuildInfo()
    buildInfo.env.capture = true
    buildInfo.env.filter.addExclude("DONT_COLLECT")
    buildInfo.name = "scripted:mavenJib test"
    buildInfo.number = ${BUILD_NUMBER}

    stage "Configure Maven build"
    def rtMaven = Artifactory.newMavenBuild()
    rtMaven.deployer releaseRepo: "${LOCAL_REPO1}", snapshotRepo: "${LOCAL_REPO1}", server: rtServer
    rtMaven.resolver releaseRepo: "${JCENTER_REMOTE_REPO}", snapshotRepo: "${JCENTER_REMOTE_REPO}", server: rtServer

    stage "Copy project example"
    FileUtils.copyDirectory(Paths.get("${MAVEN_JIB_PROJECT_PATH}").toFile(), Paths.get(pwd(), "scripted-maven-jib-example").toFile())

    stage "Run Maven"
    rtMaven.run pom: "scripted-maven-jib-example", goals: "clean install jib:build -U", buildInfo: buildInfo

    stage "Run create Docker build"
    def rtDocker = Artifactory.docker server: rtServer
    rtDocker.createDockerBuild sourceRepo: "${env.JENKINS_ARTIFACTORY_DOCKER_PUSH_REPO}", jibImageFiles: "*/target/jib-image.json", buildInfo: buildInfo

    stage "Publish build info"
    rtServer.publishBuildInfo buildInfo
}
